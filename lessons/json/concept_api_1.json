{"concept_api_1": {"questions": [{"question": "What happens when a user searches \u201cwww.facebook.com\u201d? Explain how the request gets resolved and how the user arrives at facebook web app.", "answer": "DNS acts like a phone book for ip addresses of different machines. It translates the ip address to a human readable domain name. A client making a request, to do anything, must need either the domain name of the host or the ip address. Once the user searches the domain name www.facebook.com, the domain name is queried by the DNS and a specific ip address is returned. From there the request gets sent to the ip address and Facebook responds with html/css/javascript for the user\u2019s browser to render the app.", "hints": ["IP addresses are unique address identifiers for every machine. In order to communicate with one another, ip addresses are registered on a web of different pockets of network which communicates with one another.", "DNS (domain name service) is a registrar of different ip addresses that translates an ip address to a domain name such as www.google.com. How might knowing the domain name help with the request/response in a client to host communication?"]}, {"answer": "First, the user\u2019s computer searches its own web cache for existing mapping of domain to ip. If this does not exist, the query goes to the user\u2019s ISP (internet service provider) or the dns resolver. If the resolver solver still cannot find the mapping, it passes the request further along up the dns hierarchy, known as the dns root server. The dns root server will tell the ISP the ip address of the top level domain name server (TLD) to query against. The TLD is in charge of mapping all the ip addresses of the authoritative nameserver for the given top level domain name (.org, .com, .io, etc). Once the ISP has the authoritative nameserver\u2019s ip, the ISP queries the authoritative nameserver for the domain name\u2019s ip address. Now the ISP cache\u2019s the domain name so the next time another user queries it, the ISP will hold the mapping.", "question": "Once the ip address is returned from the DNS, what happens afterwards? How does knowing the ip address help the user reach Facebook\u2019s website?", "hints": []}, {"answer": "HTTP is a protocol built to handle communication sessions over the network while APIs use HTTP to transfer data in an interfaced organized way with business logic in mind. We will talk more about HTTP requests in the next module.", "question": "What is the difference between HTTP vs APIs?", "hints": ["Hint 1:  Assume that the client already resolved the ip address through DNS. In the previous lesson, we know that once the client has the ip address, the client can directly talk with the server. What communication protocol is used in talking with the web server?"]}, {"answer": "The 5 relevant methods to REST API are: POST, GET, PUT, PATCH, DELETE. POST creates entries, GET reads, PUT updates, PATCH updates, DELETE deletes. These methods are closely related to how RestApi is designed as the  RestAPI utilizes the HTTP constructs and URL to construct stateless communication between client and server.", "question": "What are some methods of HTTP requests and what are the use cases for each?", "hints": ["Some HTTP methods are based off of verbs used for creating, reading  updating, deleting (CRUD) against a service"]}, {"answer": "Status codes are divided into 5 ranges of numbers: 1xx -> Informational, 2xx -> Success, 3xx -> Redirection, 4xx -> Client Error, 5xx -> Server Error. From Mozilla, specific example codes (These codes are the more frequent/relevant codes that should be remembered): 100 Continue: informational status response code indicates that everything so far is OK and that the client should continue with the request or ignore it if it is already finished. 200 OK: Request has succeeded. For GET it means the resource has been successfully fetched For PUT/POST it means the server properly accepted the input, could also be 201 301 Moved Permanently: The url of the request has been moved and the response includes the new URL 400: Bad Request: Some sort of syntax issues from the client request 401: Unauthorized: The request was not authenticated 403: Forbidden: The request was authenticated but not authorized. Follow Up: What\u2019s the difference between authentication vs authorization? Authentication = we know who you say you are Authorization = you have permission to do what you wish to do 404: Not Found: Server cannot find the requested resource, often meaning the client requested incorrect endpoint 405: Method Not Allowed: The request method is known by the server but not allowed, such as deleting users or specific resources. 500: Internal Server Error: General server side error indicating the server doesn\u2019t know what to do 501: Not Implemented: The requested HTTP method is not implemented. Example: The server is READ only so no post or put methods. 502: Bad Gateway: The server acting as a gateway was not able to get a response needed to handle the request. This is usually a network issue with the gateway load balancer that accepted the request and the actual server. For more information on gateways, look up load balancer", "question": "In addition to the requested data, the server also returns HTTP status codes. What are some examples of these status codes? What are the purposes of these status codes?", "hints": ["What are some use cases of these status codes? Status codes can indicate success, failure, and others.", "For each 5 HTTP methods, the same status codes can apply."]}, {"hints": ["What operations can exist regarding CRUD on Spotify playlist? Create: Create new playlist Read: Read songs from playlist, read all playlist Update: Change playlist name, add playlist song Delete: Remove playlist, remove song from playlist", "What HTTP methods can be used regarding CRUD on Spotify playlist? Create: POST new playlist Read: GET playlist, GET songs Update: PATCH playlist song, PUT playlist song Delete: DELETE playlist, DELETE song", "REST API interacts through urls. This means the api will start with spotify\u2019s domain: www.spotify.com/api. In addition, apis utilize versions. As a result, what is an example of a starting url for REST api? www.spotify.com/api/v1/<nouns>", "REST APIs involve nouns to dictate what object to interact with. As a result multiple HTTP methods can be associated with the same REST API endpoint. What are some of these url endpoints? www.spotify.com/api/v1/{user_id}/playlists -> GET: get all playlist (name, number of songs, user, follower, etc) POST: create playlist www.spotify.com/api/v1/{user_id}/playlists/{playlist_id} -> PATCH: change playlist name by id DELETE: delete playlist by id GET: get playlist property by id PUT: update the playlist and replace it www.spotify.com/api/v1/{user_id}/{playlist_id}/tracks -> GET: get playlist songs POST or PUT: create / replace song to playlist DELETE: delete song PATCH: change playlist song order", "In Post/Put/Patch the request sent will contain a body. These are additional parameters that are associated with the request. What are some examples of items you would need to add for POST, DELETE, PUT, PATCH? POST-> post new playlist. Rest API body is in JSON: www.spotify.com/api/v1/{user_id}/playlists {  name: \u201cMyEveningPlaylist,  songs: [{name: \u201cNever Say Never\u201d, artist: [\u201cJustin Bieber\u201d, \u201cJaden Smith\u201d],  album: \u201cNever Say Never - The Remixes\u201d}] } PATCH ->  update playlist name www.spotify.com/api/v1/{user_id}/{playlist_id} {   name: \u201cMyMorningPlaylist\u201d } PUT -> replace whole playlist www.spotify.com/api/v1/{user_id}/playlists {  name: \u201cMyMorningPlaylist\u201d,  songs: [{name: \u201cNever Say Never\u201d, artist: [\u201cJustin Bieber\u201d, \u201cJaden Smith\u201d],  album: \u201cNever Say Never - The Remixes\u201d}] }", "What are the responses the server should give? Give some examples for spotify playlist api POST-> post new playlist. Rest API body is in JSON: www.spotify.com/api/v1/{user_id}/playlists 200 OK {  playlist_id: 123playlist1,  date_created: 1602945257,  date_updated: 1602945257,  name: \u201cMyEveningPlaylist,  songs: [{name: \u201cNever Say Never\u201d, artist: [\u201cJustin Bieber\u201d, \u201cJaden Smith\u201d],  album: \u201cNever Say Never - The Remixes\u201d}] }"]}]}, "lesson_id": "api1", "lesson_title": "API Introduction"}