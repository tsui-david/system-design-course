{"problem_news_feed_3": {"questions": [{"question": "What API endpoints will the server have?", "answer": "The primary endpoints will allow us to: - Get the news feed - Publish a post", "hints": ["Think back to the core features of we defined in the requirements. What are some of the features a news feed should have?"]}, {"answer": "Using a REST API POST request. The POST request could look like: `POST/v1/<userId>/feed` with three parameters: - content: actual value of the post - type: this is the type of media (text, image, video) - auth_token: used to authenticate API request If the type is not text, we can encode the images or video in base64 in the request body.", "question": "How could publishing a post be handled?", "hints": []}, {"answer": "A database will be necessary to store content, however not all database options are optimal for a news feed. Because of the friend relationships, a graph database would be best suited.", "question": "What kind of storage option would we use for posts?", "hints": ["Think about the API CRUD methods @link:[](api1).", "How can we categorize the types of relationships in our data? How can we best describe that data?"]}, {"answer": "A notification that sends out push notifications to friends when new content is published.", "question": "How are friends notified when a new post has been made to their news feeds?", "hints": ["Recall the parameter fields for the POST query", "Remember to consider the different types of media a post can contain (text, images, video)."]}, {"answer": "The two models are: - Fanout on write (push): when a post is published, the new news feed is precomputed and written to friend's caches. This ensures that getting a news feed is very quick because the news feed is already created, however it can be very expensive if the user has many friends because every friends news feed must be computed. - Fanout on read (pull): when a user loads their news feed, new posts are pulled into the feed. This solves the issue of computing many news feeds if the user has many friends and also prevents unnecessary computation for users who rarely log on; however, loading the news feed will be slower for users because it must be computed when requested.", "question": "What are the two fanout models?", "hints": []}, {"answer": "The optimal approach in this case is the hybrid approach. For most users, we can use the push approach because the negative aspects of the method do not affect users who have smaller numbers of friends. For users who have large amounts of users, such as celebrities, we can use a pull approach to prevent extreme computation overload.", "hints": ["Consider the difference cases between users that have many followers and users that do not."]}]}, "lesson_id": "news_feed_3", "lesson_title": "News Feed: Interface", "video_url": "???"}